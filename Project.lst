Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 14:11:00
FIXME     (FIXME.asm					     Page 1 - 1


				TITLE FIXME     (FIXME.asm)
				
				; Author                : Ethan Rietz
				; Last Modified         : 2021-06-03
				; OSU email address     : rietze@oregonstate.edu
				; Course number/section : CS271 Section 400
				; Project Number        : 6
				; Due Date              : 2021-06-6
				; Description           : \
				;   FIXME
				
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
				mGetString  macro promptAddr, userInputAddr, byteCountAddr
				    push    edx    push    ecx    push    eax    push    edi
				    mov     edx, promptAddr
				    call    WriteString
				
				    mov     edx, userInputAddr
				    mov     ecx, MAX_LENGTH
				    call    ReadString    mov     edi, byteCountAddr
				    mov     [edi], eax
				    pop     edi    pop     eax    pop     ecx    pop     edxendm
				
				mDisplayString  macro stringAddr
				    push    edx    mov     edx, stringAddr
				    call    WriteString    pop     edxendm
				
				; An SDWORD is 32 bits and can hold numbers in the range from -2^31 to 2^31 - 1.
				;
				; This is equivilent to -2147483648 (8000 0001h) to +2147483647 (7FFF FFFFh) or
				; 10 characters + sign + null terminator = 12 characters.. However, the user
				; could enter a number with leading zeros like 000002 which would be 6
				; characters but only really 2.  MAX_LENGTH will be set higher than 12 to allow
				; leading zeros.
				;
				MAX_LENGTH = 20
				; Read 10 ints from user
				; TODO: set to 10
				NUM_INTS = 10
				
				.data
				
				; Note: lines are limited to 512 characters in MASM and this string is really
				; close to that limit
				strIntro        byte    "String Primitives and Macros",13,10,"Written by: Ethan",
				                        " Rietz",13,10,13,10,"Please provide 10 signed decimal",
				                        " integers.",13,10,"Each number needs to be small enough",
				                        " to fit inside a 32 bit register. After you have finished",
				                        " inputting the raw numbers, I will display a list of",
 = 00000014			                        " the integers, their sum, and their average value.",13,10,13,10,0
				
				strPrompt       byte    "Please enter a signed number (of this form [+-]\d+): ",0
 = 0000000A			userInput       byte    MAX_LENGTH dup(?)
				byteCount       dword   ?
 00000000			
				userValues      sdword  NUM_INTS dup(?)
				userValue       sdword  ?
				strUserValue    byte    MAX_LENGTH dup(?)
 00000000 53 74 72 69 6E	
	   67 20 50 72 69
	   6D 69 74 69 76
	   65 73 20 61 6E
	   64 20 4D 61 63
	   72 6F 73 0D 0A
	   57 72 69 74 74
	   65 6E 20 62 79
	   3A 20 45 74 68
	   61 6E 20 52 69
	   65 74 7A 0D 0A
	   0D 0A 50 6C 65
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A 45 61 63 68
	   20 6E 75 6D 62
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   73 6D 61 6C 6C
	   20 65 6E 6F 75
	   67 68 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   2C 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0D 0A 0D 0A
	   00
				sum             sdword  ?
				average         sdword  ?
				
				strYouEntered   byte    "You entered the following numbers:",13,10,0
				strTheSumIs     byte    "The sum of these numbers is: ",0
				strTheAvgIs     byte    "The rounded average is:      ",0
 0000012D 50 6C 65 61 73	strClosing      byte    "Thanks for playing!!!",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 28
	   6F 66 20 74 68
	   69 73 20 66 6F
	   72 6D 20 5B 2B
	   2D 5D 5C 64 2B
	   29 3A 20 00
 00000163  00000014 [		
	    00
	   ]
 00000177 00000000		strInvalid      byte    "ERROR: You did not enter a signed number or your",
				                        " number was too big or too small.",13,10,0
 0000017B  0000000A [		strDelimeter    byte    ", ",0
	    00000000
	   ]
 000001A3 00000000		
 000001A7  00000014 [		.code
	    00
	   ]
				main PROC
 000001BB 00000000		
 000001BF 00000000		    ; Print the program title, introduction, and instructions to user.----------
				    mov     edx, offset strIntro
 000001C3 59 6F 75 20 65	    call    WriteString
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001E8 54 68 65 20 73	
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000206 54 68 65 20 72	    ; Get values from the user--------------------------------------------------
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 20
	   20 20 20 20 00
 00000224 54 68 61 6E 6B	    mov     ecx, NUM_INTS
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 21
	   21 00
				    mov     edi, offset userValues
 0000023A 45 52 52 4F 52	
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 20 6F 72
	   20 74 6F 6F 20
	   73 6D 61 6C 6C
	   2E 0D 0A 00
				    _getNumbers:
 0000028E 2C 20 00		        ; reads users string into userValue
				        push    offset strInvalid   ; +20
 00000000			        push    offset strPrompt    ; +16
 00000000			        push    offset userInput    ; +12
				        push    offset byteCount    ; +8
				        push    offset userValue    ; +4
 00000000  BA 00000000 R	        call    ReadVal             ; should return 4*4 = 16
 00000005  E8 00000000 E	        ; fill position in userValues with userValue
				        mov     ebx, userValue
				        mov     [edi], ebx
 0000000A  B9 0000000A		        add     edi, type userValues
 0000000F  BF 0000017B R	        loop    _getNumbers
				
 00000014			    call    CrLf
				
 00000014  68 0000023A R	    ; Calculate sum and print out users values----------------------------------
 00000019  68 0000012D R	    mDisplayString  offset strYouEntered
 0000001E  68 00000163 R	    call    CrLf
 00000023  68 00000177 R	
 00000028  68 000001A3 R	    mov     esi, offset userValues
 0000002D  E8 000000D2		    mov     ecx, NUM_INTS
				    _calculateSum:
 00000032  8B 1D 000001A3 R	        mov     ebx, [esi]
 00000038  89 1F		        add     sum, ebx
 0000003A  83 C7 04		        add     esi, type userValues
 0000003D  E2 D5		        push    ebx
				        push    offset strUserValue
 0000003F  E8 00000000 E	        push    lengthof strUserValue
				        call    WriteVal
				
				        cmp     ecx, 1
 00000044  52		     1	    push    edx
 00000045  BA 000001C3 R     1	    mov     edx, offset strYouEntered
 0000004A  E8 00000000 E     1	    call    WriteString
 0000004F  5A		     1	    pop     edx
 00000050  E8 00000000 E	        je      _endLoop
				        mDisplayString  offset strDelimeter
 00000055  BE 0000017B R	        loop    _calculateSum
 0000005A  B9 0000000A		
 0000005F			        _endLoop:
 0000005F  8B 1E		            call    CrLf
 00000061  01 1D 000001BB R	            call    CrLf
 00000067  83 C6 04		
 0000006A  53			    ; Calculate the average-----------------------------------------------------
 0000006B  68 000001A7 R	    _calculateAvg:
 00000070  6A 14		        mov     eax, sum
 00000072  E8 00000155		        mov     ebx, NUM_INTS
				        cdq     ; sign extend eax into edx for 32 bit signed division
 00000077  83 F9 01		        idiv    ebx
 0000007A  74 0E		        mov     average, eax
				
 0000007C  52		     1	    push    edx
 0000007D  BA 0000028E R     1	    mov     edx, offset strDelimeter
 00000082  E8 00000000 E     1	    call    WriteString
 00000087  5A		     1	    pop     edx
 00000088  E2 D5		    ; Display the sum of the numbers--------------------------------------------
				    mDisplayString  offset strTheSumIs
 0000008A			
 0000008A  E8 00000000 E	    push    sum
 0000008F  E8 00000000 E	    push    offset strUserValue
				    push    lengthof strUserValue
				    call    WriteVal
 00000094			    call    CrLf
 00000094  A1 000001BB R	
 00000099  BB 0000000A		    ; Display the average of the numbers----------------------------------------
 0000009E  99			    mDisplayString  offset strTheAvgIs
 0000009F  F7 FB		
 000000A1  A3 000001BF R	    push    average
				    push    offset strUserValue
				    push    lengthof strUserValue
				    call    WriteVal
 000000A6  52		     1	    push    edx
 000000A7  BA 000001E8 R     1	    mov     edx, offset strTheSumIs
 000000AC  E8 00000000 E     1	    call    WriteString
 000000B1  5A		     1	    pop     edx
				    call    CrLf
 000000B2  FF 35 000001BB R	    call    CrLf
 000000B8  68 000001A7 R	
 000000BD  6A 14		    ; Print a farewell message--------------------------------------------------
 000000BF  E8 00000108		    mDisplayString  offset strClosing
 000000C4  E8 00000000 E	
				    Invoke ExitProcess,0    ; exit to operating system
				main ENDP
				
 000000C9  52		     1	    push    edx
 000000CA  BA 00000206 R     1	    mov     edx, offset strTheAvgIs
 000000CF  E8 00000000 E     1	    call    WriteString
 000000D4  5A		     1	    pop     edx
				ReadVal     proc
 000000D5  FF 35 000001BF R	    LOCAL userValueSign:dword, multiplier:dword
 000000DB  68 000001A7 R	    pushad
 000000E0  6A 14		    ;[ebp+24] = strInvalid (input)
 000000E2  E8 000000E5		    ;[ebp+20] = strPrompt (input)
 000000E7  E8 00000000 E	    ;[ebp+16] = userInput (output)
 000000EC  E8 00000000 E	    ;[ebp+12] = byteCount (output)
				    ;[ebp+8]  = userValue (output)
				
				    ; The number 3945 = 3E3 + 9E2 + 4E1 + 5E0
 000000F1  52		     1	    push    edx
 000000F2  BA 00000224 R     1	    mov     edx, offset strClosing
 000000F7  E8 00000000 E     1	    call    WriteString
 000000FC  5A		     1	    pop     edx
				    ; Here we are storing 3945 as string by taking each digit, multiping by 10,
				    ; and adding it to a sum.
 000000FD  6A 00	   *	    push   +000000000h
 000000FF  E8 00000000 E   *	    call   ExitProcess
 00000104			    _promptForInput:
				        mGetString  [ebp+20], [ebp+16], [ebp+12]
 00000104			
				    mov     userValueSign, 0    ; set to False for number being negative
 00000104  55		   *	    push   ebp
 00000105  8B EC	   *	    mov    ebp, esp
 00000107  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000010A  60			    mov     multiplier, 10      ; repeatedly multiply by 10 in loop
				    mov     eax, 0              ; initialize eax for string processing
				    mov     ebx, 0              ; sum of digits
				    mov     esi, [ebp+16]       ; point lodsb to the start of userInput
				    mov     ecx, byteCount
				    cld
				
				    _checkDigit:
				        lodsb
				        cmp     ecx, byteCount
 0000010B			        je      _firstCharacter
				        jmp     _notFirstCharacter
 0000010B  52		     1	    push    edx
 0000010C  51		     1	    push    ecx
 0000010D  50		     1	    push    eax
 0000010E  57		     1	    push    edi
 0000010F  8B 55 14	     1	    mov     edx, [ebp+20]
 00000112  E8 00000000 E     1	    call    WriteString
 00000117  8B 55 10	     1	    mov     edx, [ebp+16]
 0000011A  B9 00000014	     1	    mov     ecx, MAX_LENGTH
 0000011F  E8 00000000 E     1	    call    ReadString
 00000124  8B 7D 0C	     1	    mov     edi, [ebp+12]
 00000127  89 07	     1	    mov     [edi], eax
 00000129  5F		     1	    pop     edi
 0000012A  58		     1	    pop     eax
 0000012B  59		     1	    pop     ecx
 0000012C  5A		     1	    pop     edx
				
 0000012D  C7 45 FC		        _firstCharacter:
	   00000000
 00000134  C7 45 F8		            cmp     al, 45  ; ascii 45 is equal to "-" 
	   0000000A
 0000013B  B8 00000000		            je      _negative
 00000140  BB 00000000		            cmp     al, 43  ; ascii 43 is equal to "+"
 00000145  8B 75 10		            je      _positive
 00000148  8B 0D 00000177 R	            jmp     _notFirstCharacter
 0000014E  FC			
				            _negative:
 0000014F			                mov     userValueSign, 1
 0000014F  AC			                loop     _checkDigit
 00000150  3B 0D 00000177 R	
 00000156  74 02		            _positive:
 00000158  EB 15		                loop    _checkDigit
				
 0000015A			        _notFirstCharacter:
 0000015A  3C 2D		            cmp     al, 48  ; ascii 48 is equal to 0
 0000015C  74 06		            jl      _numberIsInvalid
 0000015E  3C 2B		            cmp     al, 57  ; ascii 57 is equal to 9
 00000160  74 0B		            jg      _numberIsInvalid
 00000162  EB 0B		
				            _numberIsValid:
 00000164			                sub     al, 48  ; convert ascii [48-57] to digit [0-9]
 00000164  C7 45 FC		                push    eax
	   00000001
 0000016B  E2 E2		                mov     eax, ebx
				                mul     multiplier
 0000016D			                mov     ebx, eax
 0000016D  E2 E0		                pop     eax
				                add     ebx, eax
 0000016F			                loop    _checkDigit
 0000016F  3C 30		                jmp     _storeValue
 00000171  7C 15		
 00000173  3C 39		            _numberIsInvalid:
 00000175  7F 11		                mDisplayString  [ebp+24]
				                jmp     _promptForInput
 00000177			
 00000177  2C 30		    _storeValue:
 00000179  50			        cmp     userValueSign, 1
 0000017A  8B C3		        jne      _checkTooBig
 0000017C  F7 65 F8		
 0000017F  8B D8		        _checkTooSmall:
 00000181  58			            cmp     ebx, 80000000h
 00000182  03 D8		            ja      _magnitudeTooLarge
 00000184  E2 C9		            neg     ebx
 00000186  EB 0F		            jmp     _actuallyStoreNum
				
 00000188			        _checkTooBig:
				            cmp     ebx, 7FFFFFFFh
 00000188  52		     1	    push    edx
 00000189  8B 55 18	     1	    mov     edx, [ebp+24]
 0000018C  E8 00000000 E     1	    call    WriteString
 00000191  5A		     1	    pop     edx
 00000192  E9 FFFFFF74		            ja      _magnitudeTooLarge
				            jmp     _actuallyStoreNum
 00000197			
 00000197  83 7D FC 01		            _magnitudeTooLarge:
 0000019B  75 0C		                mDisplayString  [ebp+24]
				                jmp     _promptForInput
 0000019D			
 0000019D  81 FB 80000000	        _actuallyStoreNum:
 000001A3  77 0E		            mov     edi, [ebp+8]
 000001A5  F7 DB		            mov     [edi], ebx
 000001A7  EB 19		
				    popad
 000001A9			    ret     20
 000001A9  81 FB 7FFFFFFF	ReadVal     endp
 000001AF  77 02		
 000001B1  EB 0F		WriteVal    proc
				    LOCAL userValueSign:dword, divisor:dword
 000001B3			    pushad
				    ; ebp+16 = value of sdword
 000001B3  52		     1	    push    edx
 000001B4  8B 55 18	     1	    mov     edx, [ebp+24]
 000001B7  E8 00000000 E     1	    call    WriteString
 000001BC  5A		     1	    pop     edx
 000001BD  E9 FFFFFF49		    ; ebp+12 = address of strUserValue
				    ; ebp+8  = length of strUserValue
 000001C2			
 000001C2  8B 7D 08		
 000001C5  89 1F		    mov     userValueSign, 0  ; negative
				    mov     edi, [ebp+12]
 000001C7  61			    add     edi, [ebp+8]
 000001C8  C9		   *	    leave  
 000001C9  C2 0014		    dec     edi
 000001CC			    std
				    mov     al, 0
 000001CC			    stosb
				    mov     eax, [ebp+16]
 000001CC  55		   *	    push   ebp
 000001CD  8B EC	   *	    mov    ebp, esp
 000001CF  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001D2  60			    mov     divisor, 10
				    mov     edx, 0          ; clear out to store remainder of divisions
				    add     eax, 0
				    jns     _loop
				    mov     userValueSign, 1
				    neg     eax
 000001D3  C7 45 FC		
	   00000000
 000001DA  8B 7D 0C		    ; The number 2134 will be stored in memory like "00000856" so we must keep
 000001DD  03 7D 08		    ; looping from the right side until we hit a 0. This means we have printed
 000001E0  4F			    ; all of the number
 000001E1  FD			    _loop:
 000001E2  B0 00		        div    divisor
 000001E4  AA			        add     edx, 48
 000001E5  8B 45 10		        push    eax
 000001E8  C7 45 F8		        mov     al, dl
	   0000000A
 000001EF  BA 00000000		        stosb
 000001F4  83 C0 00		        pop     eax
 000001F7  79 09		
 000001F9  C7 45 FC		        mov     edx, 0      ; clear out to store remainder of division
	   00000001
 00000200  F7 D8		        cmp     eax, 0
				        jne    _loop
				
				    cmp     userValueSign, 0
				
 00000202			    je     _positive
 00000202  F7 75 F8		    ; print out a minus sign
 00000205  83 C2 30		    mov     al, 45  ; ascii 45 is equal to "-"
 00000208  50			    stosb
 00000209  8A C2		
 0000020B  AA			    _positive:
 0000020C  58			        inc     edi
				        mDisplayString  edi
 0000020D  BA 00000000		
 00000212  83 F8 00		    popad
 00000215  75 EB		    ret     12
				WriteVal     endp
 00000217  83 7D FC 00		
				END main
 0000021B  74 03
 0000021D  B0 2D
 0000021F  AA
 00000220
 00000220  47
 00000221  52		     1	    push    edx
 00000222  8B D7	     1	    mov     edx, edi
 00000224  E8 00000000 E     1	    call    WriteString
 00000229  5A		     1	    pop     edx
 0000022A  61
 0000022B  C9		   *	    leave  
 0000022C  C2 000C
 0000022F
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 14:11:00
FIXME     (FIXME.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000291 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000022F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000104 _TEXT	Length= 000000C8 Public STDCALL
  userValueSign  . . . . . . . .	DWord	 bp - 00000004
  multiplier . . . . . . . . . .	DWord	 bp - 00000008
  _promptForInput  . . . . . . .	L Near	 0000010B _TEXT	
  _checkDigit  . . . . . . . . .	L Near	 0000014F _TEXT	
  _firstCharacter  . . . . . . .	L Near	 0000015A _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000164 _TEXT	
  _positive  . . . . . . . . . .	L Near	 0000016D _TEXT	
  _notFirstCharacter . . . . . .	L Near	 0000016F _TEXT	
  _numberIsValid . . . . . . . .	L Near	 00000177 _TEXT	
  _numberIsInvalid . . . . . . .	L Near	 00000188 _TEXT	
  _storeValue  . . . . . . . . .	L Near	 00000197 _TEXT	
  _checkTooSmall . . . . . . . .	L Near	 0000019D _TEXT	
  _checkTooBig . . . . . . . . .	L Near	 000001A9 _TEXT	
  _magnitudeTooLarge . . . . . .	L Near	 000001B3 _TEXT	
  _actuallyStoreNum  . . . . . .	L Near	 000001C2 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001CC _TEXT	Length= 00000063 Public STDCALL
  userValueSign  . . . . . . . .	DWord	 bp - 00000004
  divisor  . . . . . . . . . . .	DWord	 bp - 00000008
  _loop  . . . . . . . . . . . .	L Near	 00000202 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000220 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000104 Public STDCALL
  _getNumbers  . . . . . . . . .	L Near	 00000014 _TEXT	
  _calculateSum  . . . . . . . .	L Near	 0000005F _TEXT	
  _endLoop . . . . . . . . . . .	L Near	 0000008A _TEXT	
  _calculateAvg  . . . . . . . .	L Near	 00000094 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_LENGTH . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_INTS . . . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 000001BF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000177 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
strClosing . . . . . . . . . . .	Byte	 00000224 _DATA	
strDelimeter . . . . . . . . . .	Byte	 0000028E _DATA	
strIntro . . . . . . . . . . . .	Byte	 00000000 _DATA	
strInvalid . . . . . . . . . . .	Byte	 0000023A _DATA	
strPrompt  . . . . . . . . . . .	Byte	 0000012D _DATA	
strTheAvgIs  . . . . . . . . . .	Byte	 00000206 _DATA	
strTheSumIs  . . . . . . . . . .	Byte	 000001E8 _DATA	
strUserValue . . . . . . . . . .	Byte	 000001A7 _DATA	
strYouEntered  . . . . . . . . .	Byte	 000001C3 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001BB _DATA	
userInput  . . . . . . . . . . .	Byte	 00000163 _DATA	
userValues . . . . . . . . . . .	DWord	 0000017B _DATA	
userValue  . . . . . . . . . . .	DWord	 000001A3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
