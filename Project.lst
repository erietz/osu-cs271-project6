Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/05/21 22:27:21
FIXME     (FIXME.asm					     Page 1 - 1


				TITLE FIXME     (FIXME.asm)
				
				; Author                : Ethan Rietz
				; Last Modified         : 2021-06-03
				; OSU email address     : rietze@oregonstate.edu
				; Course number/section : CS271 Section 400
				; Project Number        : 6
				; Due Date              : 2021-06-6
				; Description           : \
				;   FIXME
				
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
				mGetString  macro promptAddr, userInputAddr, byteCountAddr
				    push    edx    push    ecx    push    eax    push    edi
				    mov     edx, promptAddr
				    call    WriteString
				
				    mov     edx, userInputAddr
				    mov     ecx, MAX_LENGTH
				    call    ReadString    mov     edi, byteCountAddr
				    mov     [edi], eax
				    pop     edi    pop     eax    pop     ecx    pop     edxendm
				
				mDisplayString  macro stringAddr
				    push    edx    mov     edx, stringAddr
				    call    WriteString    pop     edxendm
				
				; (insert constant definitions here)
				;
				; An SDWORD is 32 bits and can hold numbers in the range from -2^31 to 2^31 - 1.
				; This is equivilent to -2147483648 to +2147483647
				;
				; ReadString seems to only read 10 so adding 1 plus an extra to check if too
				; long
				MAX_LENGTH = 11 + 2     
				; Read 10 ints from user
				NUM_INTS = 3
				
				.data
				
				; Note: lines are limited to 512 characters in MASM and this string is really
				; close to that limit
				strIntro        byte    "String Primitives and Macros",13,10,"Written by: Ethan",
				                        " Rietz",13,10,13,10,"Please provide 10 signed decimal",
				                        " integers.",13,10,"Each number needs to be small enough",
				                        " to fit inside a 32 bit register. After you have finished",
				                        " inputting the raw numbers, I will display a list of",
				                        " the integers, their sum, and their average value.",13,10,13,10,0
 = 0000000D			
				strPrompt       byte    "Please enter a signed number: ",0
 = 00000003			userInput       byte    MAX_LENGTH dup(?)
				byteCount       dword   ?
 00000000			
				userValues      sdword  NUM_INTS dup(?)
				userValue       sdword  ?
				strUserValue    byte    MAX_LENGTH dup(?)
 00000000 53 74 72 69 6E	
	   67 20 50 72 69
	   6D 69 74 69 76
	   65 73 20 61 6E
	   64 20 4D 61 63
	   72 6F 73 0D 0A
	   57 72 69 74 74
	   65 6E 20 62 79
	   3A 20 45 74 68
	   61 6E 20 52 69
	   65 74 7A 0D 0A
	   0D 0A 50 6C 65
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A 45 61 63 68
	   20 6E 75 6D 62
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   73 6D 61 6C 6C
	   20 65 6E 6F 75
	   67 68 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   2C 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0D 0A 0D 0A
	   00
				sum             sdword  ?
				average         sdword  ?
				
				strYouEntered   byte    "You entered the following numbers:",13,10,0
				strTheSumIs     byte    "The sum of these numbers is: ",0
				strTheAvgIs     byte    "The rounded average is:      ",0
 0000012D 50 6C 65 61 73	strClosing      byte    "Thanks for playing!!!",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000014C  0000000D [		
	    00
	   ]
 00000159 00000000		strInvalid      byte    "Number Invalid... Try again",13,10,0
				
 0000015D  00000003 [		negative        dword   0
	    00000000
	   ]
 00000169 00000000		
 0000016D  0000000D [		.code
	    00
	   ]
				main PROC
 0000017A 00000000		
 0000017E 00000000		    ; Print the program title, introduction, and instructions to user.----------
				    mov     edx, offset strIntro
 00000182 59 6F 75 20 65	    call    WriteString
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001A7 54 68 65 20 73	
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001C5 54 68 65 20 72	
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 20
	   20 20 20 20 00
 000001E3 54 68 61 6E 6B	    ; Get values from the user--------------------------------------------------
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 21
	   21 00
				    mov     ecx, NUM_INTS
 000001F9 4E 75 6D 62 65	    mov     edi, offset userValues
	   72 20 49 6E 76
	   61 6C 69 64 2E
	   2E 2E 20 54 72
	   79 20 61 67 61
	   69 6E 0D 0A 00
				    _getNumbers:
 00000217 00000000		        ; reads users string into userValue
				        push    offset strPrompt  ; +16
 00000000			        push    offset userInput    ; +12
 00000000			        push    offset byteCount    ; +8
				        push    offset userValue    ; +4
				        call    ReadVal             ; should return 4*4 = 16
 00000000  BA 00000000 R	        ; fill position in userValues with userValue
 00000005  E8 00000000 E	        mov     ebx, userValue
				        mov     [edi], ebx
				        add     edi, type userValues
				
 0000000A  B9 00000003		        ;mov     edx, offset userInput
 0000000F  BF 0000015D R	        ;call    WriteString
 00000014			        ;call    CrLf
				        ;mov     eax, byteCount
 00000014  68 0000012D R	        ;call    WriteDec
 00000019  68 0000014C R	        ;call    CrLf
 0000001E  68 00000159 R	        ;mov     eax, userValue
 00000023  68 00000169 R	        ;call    WriteInt
 00000028  E8 000000AD		
				        loop    _getNumbers
 0000002D  8B 1D 00000169 R	
 00000033  89 1F		    ; Calculate sum, average, and display results-------------------------------
 00000035  83 C7 04		    mDisplayString  offset strYouEntered
				
				    mov     esi, offset userValues
				    mov     ecx, NUM_INTS
				    _calculateSum:
				        mov     ebx, [esi]
				        add     sum, ebx
				        add     esi, type userValues
				
				        ;mov     eax, ebx
				        ;call    WriteInt
 00000038  E2 DA		        push    ebx
				        push    offset strUserValue
				        push    lengthof strUserValue
				        call    WriteVal
 0000003A  52		     1	    push    edx
 0000003B  BA 00000182 R     1	    mov     edx, offset strYouEntered
 00000040  E8 00000000 E     1	    call    WriteString
 00000045  5A		     1	    pop     edx
				        call    CrLf
 00000046  BE 0000015D R	
 0000004B  B9 00000003		        loop    _calculateSum
 00000050			
 00000050  8B 1E		    _calculateAvg:
 00000052  01 1D 0000017A R	        mov     eax, sum
 00000058  83 C6 04		        mov     ebx, NUM_INTS
				        cdq     ;TODO: what does this do?
				        idiv    ebx
				        mov     average, eax
 0000005B  53			
 0000005C  68 0000016D R	    mDisplayString  offset strTheSumIs
 00000061  6A 0D		
 00000063  E8 00000107		    push    sum
 00000068  E8 00000000 E	    push    offset strUserValue
				    push    lengthof strUserValue
 0000006D  E2 E1		    call    WriteVal
				    ;mov     eax, sum
 0000006F			    ;call    WriteInt
 0000006F  A1 0000017A R	    call    CrLf
 00000074  BB 00000003		
 00000079  99			    mDisplayString  offset strTheAvgIs
 0000007A  F7 FB		
 0000007C  A3 0000017E R	    push    average
				    push    offset strUserValue
				    push    lengthof strUserValue
 00000081  52		     1	    push    edx
 00000082  BA 000001A7 R     1	    mov     edx, offset strTheSumIs
 00000087  E8 00000000 E     1	    call    WriteString
 0000008C  5A		     1	    pop     edx
				    call    WriteVal
 0000008D  FF 35 0000017A R	    ;mov     eax, average
 00000093  68 0000016D R	    ;call    WriteInt
 00000098  6A 0D		    call    CrLf
 0000009A  E8 000000D0		
				    mDisplayString  offset strClosing
				
 0000009F  E8 00000000 E	    ;mGetString  offset strPrompt, offset userInput, offset byteCount
				    ;mDisplayString  offset userInput
				    ;mov     eax, byteCount
 000000A4  52		     1	    push    edx
 000000A5  BA 000001C5 R     1	    mov     edx, offset strTheAvgIs
 000000AA  E8 00000000 E     1	    call    WriteString
 000000AF  5A		     1	    pop     edx
				    ;call    WriteDec
 000000B0  FF 35 0000017E R	
 000000B6  68 0000016D R	    Invoke ExitProcess,0    ; exit to operating system
 000000BB  6A 0D		main ENDP
 000000BD  E8 000000AD		
				ReadVal     proc
				    ;[ebp+20] = strPrompt
 000000C2  E8 00000000 E	    ;[ebp+16] = userInput
				    ;[ebp+12] = byteCount
				    ;[ebp+8]  = userValue (output)
 000000C7  52		     1	    push    edx
 000000C8  BA 000001E3 R     1	    mov     edx, offset strClosing
 000000CD  E8 00000000 E     1	    call    WriteString
 000000D2  5A		     1	    pop     edx
				    push    ebp
				    mov     ebp, esp
				    pushad
				
				
				    ; The number 3945 = 3E3 + 9E2 + 4E1 + 5E0
				    _promptForInput:
 000000D3  6A 00	   *	    push   +000000000h
 000000D5  E8 00000000 E   *	    call   ExitProcess
 000000DA			        mGetString  [ebp+20], [ebp+16], [ebp+12]
				
 000000DA			    mov     ebx, 0  ; set to False for number being negative
				    mov     eax, 0  ; initialize eax for string processing
				    mov     edx, 0  ; sum of digits
				    mov     esi, [ebp+16]
				    mov     ecx, byteCount
 000000DA  55			    ; for looping throug in reverse
 000000DB  8B EC		    ;add     esi, ecx
 000000DD  60			    ;dec     esi
				    cld     ; clear direction flag
				
				    _checkDigit:
 000000DE			        ;std     ; set direction flag to decrement ESI and EDI for string instructions 
				        lodsb
 000000DE  52		     1	    push    edx
 000000DF  51		     1	    push    ecx
 000000E0  50		     1	    push    eax
 000000E1  57		     1	    push    edi
 000000E2  8B 55 14	     1	    mov     edx, [ebp+20]
 000000E5  E8 00000000 E     1	    call    WriteString
 000000EA  8B 55 10	     1	    mov     edx, [ebp+16]
 000000ED  B9 0000000D	     1	    mov     ecx, MAX_LENGTH
 000000F2  E8 00000000 E     1	    call    ReadString
 000000F7  8B 7D 0C	     1	    mov     edi, [ebp+12]
 000000FA  89 07	     1	    mov     [edi], eax
 000000FC  5F		     1	    pop     edi
 000000FD  58		     1	    pop     eax
 000000FE  59		     1	    pop     ecx
 000000FF  5A		     1	    pop     edx
				        cmp     ecx, byteCount
 00000100  BB 00000000		        je      _firstCharacter
 00000105  B8 00000000		        jmp     _notFirstCharacter
 0000010A  BA 00000000		
 0000010F  8B 75 10		        _firstCharacter:
 00000112  8B 0D 00000159 R	            cmp     al, 45  ; "-"
				            je      _negative
				            jmp     _notFirstCharacter
				
 00000118  FC			            _negative:
				                mov     ebx, 1
 00000119			                loop     _checkDigit
				
 00000119  AC			        _notFirstCharacter:
 0000011A  3B 0D 00000159 R	            cmp     al, 48
 00000120  74 02		            jl      _numberIsInvalid
 00000122  EB 0D		            cmp     al, 57
				            jg      _numberIsInvalid
 00000124			
 00000124  3C 2D		            _numberIsValid:
 00000126  74 02		                sub     al, 48
 00000128  EB 07		                push    eax
				                mov     eax, edx
 0000012A			                push    ebx
 0000012A  BB 00000001		                mov     ebx, 10
 0000012F  E2 E8		                mul     ebx
				                pop     ebx
 00000131			                mov     edx, eax
 00000131  3C 30		                pop     eax
 00000133  7C 1B		                add     edx, eax
 00000135  3C 39		                loop    _checkDigit
 00000137  7F 17		                jmp     _storeValue
				
 00000139			            _numberIsInvalid:
 00000139  2C 30		                push    edx
 0000013B  50			                ; TODO: can't use strInvalid without reference
 0000013C  8B C2		                mov     edx, offset strInvalid
 0000013E  53			                call    WriteString
 0000013F  BB 0000000A		                pop     edx
 00000144  F7 E3		                jmp     _promptForInput
 00000146  5B			
 00000147  8B D0		    _storeValue:
 00000149  58			        cmp     ebx, 1
 0000014A  03 D0		        jne      _storePositive
 0000014C  E2 CB		        neg     edx
 0000014E  EB 0E		
				        _storePositive:
 00000150			            mov     edi, [ebp+8]
 00000150  52			            mov     [edi], edx
				
 00000151  BA 000001F9 R	    popad
 00000156  E8 00000000 E	    pop     ebp
 0000015B  5A			    ret     16
 0000015C  EB 80		ReadVal     endp
				
 0000015E			WriteVal    proc
 0000015E  83 FB 01		    ; ebp+16 = value of sdword
 00000161  75 02		    ; ebp+12 = address of strUserValue
 00000163  F7 DA		    ; ebp+8  = length of strUserValue
				    push    ebp
 00000165			    mov     ebp, esp
 00000165  8B 7D 08		    pushad
 00000168  89 17		
				
 0000016A  61			    mov     negative, 0  ; negative
 0000016B  5D			    mov     edi, [ebp+12]
 0000016C  C2 0010		    add     edi, [ebp+8]
 0000016F			    dec     edi
				    std
 0000016F			    mov     al, 0
				    stosb
				    mov     eax, [ebp+16]
				    mov     ebx, 10
 0000016F  55			    add     eax, 0
 00000170  8B EC		    jns     _loop
 00000172  60			    mov     negative, 1
				    neg     eax
				
 00000173  C7 05 00000217 R	    _loop:
	   00000000
 0000017D  8B 7D 0C		        cdq
 00000180  03 7D 08		        idiv    ebx
 00000183  4F			        add     edx, 48
 00000184  FD			        push    eax
 00000185  B0 00		        mov     al, dl
 00000187  AA			        stosb
 00000188  8B 45 10		        pop     eax
 0000018B  BB 0000000A		        cmp     eax, 0
 00000190  83 C0 00		        jne    _loop
 00000193  79 0C		
 00000195  C7 05 00000217 R	    cmp     negative, 1
	   00000001
 0000019F  F7 D8		
				    ;JNE     _something
 000001A1			    ;mov     al, 45
 000001A1  99			    ;stosb
 000001A2  F7 FB		
 000001A4  83 C2 30		    ;_something:
 000001A7  50			        inc     edi
 000001A8  8A C2		        mDisplayString  edi
 000001AA  AA			
 000001AB  58			    popad
 000001AC  83 F8 00		    pop     ebp
 000001AF  75 F0		    ret     12
				WriteVal     endp
 000001B1  83 3D 00000217 R	
	   01
				END main
 000001B8  47
 000001B9  52		     1	    push    edx
 000001BA  8B D7	     1	    mov     edx, edi
 000001BC  E8 00000000 E     1	    call    WriteString
 000001C1  5A		     1	    pop     edx
 000001C2  61
 000001C3  5D
 000001C4  C2 000C
 000001C7
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/05/21 22:27:21
FIXME     (FIXME.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000021B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001C7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000DA _TEXT	Length= 00000095 Public STDCALL
  _promptForInput  . . . . . . .	L Near	 000000DE _TEXT	
  _checkDigit  . . . . . . . . .	L Near	 00000119 _TEXT	
  _firstCharacter  . . . . . . .	L Near	 00000124 _TEXT	
  _negative  . . . . . . . . . .	L Near	 0000012A _TEXT	
  _notFirstCharacter . . . . . .	L Near	 00000131 _TEXT	
  _numberIsValid . . . . . . . .	L Near	 00000139 _TEXT	
  _numberIsInvalid . . . . . . .	L Near	 00000150 _TEXT	
  _storeValue  . . . . . . . . .	L Near	 0000015E _TEXT	
  _storePositive . . . . . . . .	L Near	 00000165 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000016F _TEXT	Length= 00000058 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 000001A1 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000DA Public STDCALL
  _getNumbers  . . . . . . . . .	L Near	 00000014 _TEXT	
  _calculateSum  . . . . . . . .	L Near	 00000050 _TEXT	
  _calculateAvg  . . . . . . . .	L Near	 0000006F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_LENGTH . . . . . . . . . . .	Number	 0000000Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_INTS . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 0000017E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000159 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negative . . . . . . . . . . . .	DWord	 00000217 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strClosing . . . . . . . . . . .	Byte	 000001E3 _DATA	
strIntro . . . . . . . . . . . .	Byte	 00000000 _DATA	
strInvalid . . . . . . . . . . .	Byte	 000001F9 _DATA	
strPrompt  . . . . . . . . . . .	Byte	 0000012D _DATA	
strTheAvgIs  . . . . . . . . . .	Byte	 000001C5 _DATA	
strTheSumIs  . . . . . . . . . .	Byte	 000001A7 _DATA	
strUserValue . . . . . . . . . .	Byte	 0000016D _DATA	
strYouEntered  . . . . . . . . .	Byte	 00000182 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000017A _DATA	
userInput  . . . . . . . . . . .	Byte	 0000014C _DATA	
userValues . . . . . . . . . . .	DWord	 0000015D _DATA	
userValue  . . . . . . . . . . .	DWord	 00000169 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
